<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.5</p>
<p>Code analyzed:</p>
<ul>
<li>D:\learn\FormalMethod\Juliet_Test_Suite_v1.3_for_Java.zip</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>37355 lines of code analyzed,
	in 503 classes, 
	in 31 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">17</td>
<td align="right">0.46</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">56</td>
<td align="right">1.50</td>
</tr>
<tr class="tablerow1">
<td>Low Priority Warnings</td>
<td align="right">18</td>
<td align="right">0.48</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>91</b>
</td>
<td align="right">
<b>2.44</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">91</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>91</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65551');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class com.sun.mail.auth.Ntlm<br/>In method com.sun.mail.auth.Ntlm.init0()<br/>At Ntlm.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65839');">
<td>
<span class="priority-3">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65839" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class com.sun.mail.imap.protocol.IMAPSaslAuthenticator<br/>In method com.sun.mail.imap.protocol.IMAPSaslAuthenticator.authenticate(String[], String, String, String, String)<br/>At IMAPSaslAuthenticator.java:[line 226]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66162');">
<td>
<span class="priority-3">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66162" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class com.sun.mail.smtp.SMTPSaslAuthenticator<br/>In method com.sun.mail.smtp.SMTPSaslAuthenticator.authenticate(String[], String, String, String, String)<br/>At SMTPSaslAuthenticator.java:[line 211]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66274');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66274" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class com.sun.mail.util.logging.MailHandler<br/>In method com.sun.mail.util.logging.MailHandler.toMsgString(Throwable)<br/>At MailHandler.java:[line 2213]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66655');">
<td>
<span class="priority-3">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66655" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class javax.mail.internet.MailDateFormat<br/>In method javax.mail.internet.MailDateFormat.parseDate(char[], ParsePosition, boolean)<br/>At MailDateFormat.java:[line 334]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66364');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66364" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class javax.mail.Session<br/>In method javax.mail.Session.getService(Provider, URLName)<br/>At Session.java:[line 783]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66418');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66418" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class javax.mail.Session<br/>In method javax.mail.Session.getService(Provider, URLName)<br/>At Session.java:[line 797]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70184');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70184" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.commons.lang.exception.ExceptionUtils<br/>In method org.apache.commons.lang.exception.ExceptionUtils.getFullStackTrace(Throwable)<br/>At ExceptionUtils.java:[line 872]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70238');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70238" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.commons.lang.exception.ExceptionUtils<br/>In method org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(Throwable)<br/>At ExceptionUtils.java:[line 896]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70292');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70292" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.commons.lang.exception.NestableDelegate<br/>In method org.apache.commons.lang.exception.NestableDelegate.getStackFrames(Throwable)<br/>At NestableDelegate.java:[line 372]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70346');">
<td>
<span class="priority-2">ERRMSG</span>
</td>
<td>Possible information exposure through an error message</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70346" style="display: none;">
<a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
<br/>In class org.apache.commons.lang.exception.NestableDelegate<br/>In method org.apache.commons.lang.exception.NestableDelegate.printStackTrace(PrintWriter)<br/>At NestableDelegate.java:[line 317]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66328');">
<td>
<span class="priority-3">SECDESGAD</span>
</td>
<td>This class could make application using serialization vulnerable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66328" style="display: none;">
<a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
<br/>In class javax.mail.Message$RecipientType<br/>At Message.java:[lines 220-267]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67416');">
<td>
<span class="priority-3">SECDESGAD</span>
</td>
<td>This class could make application using serialization vulnerable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67416" style="display: none;">
<a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
<br/>In class javax.servlet.http.HttpServlet<br/>At HttpServlet.java:[lines 92-718]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70112');">
<td>
<span class="priority-2">SECDESGAD</span>
</td>
<td>This class could make application using serialization vulnerable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70112" style="display: none;">
<a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
<br/>In class org.apache.commons.lang.enum.Enum<br/>At Enum.java:[lines 254-652]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70148');">
<td>
<span class="priority-2">SECDESGAD</span>
</td>
<td>This class could make application using serialization vulnerable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70148" style="display: none;">
<a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
<br/>In class org.apache.commons.lang.enums.Enum<br/>At Enum.java:[lines 300-698]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65605');">
<td>
<span class="priority-2">SECDU</span>
</td>
<td>DES should be replaced with AES</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65605" style="display: none;">
<a href="#DES_USAGE">Bug type DES_USAGE (click for details)</a>
<br/>In class com.sun.mail.auth.Ntlm<br/>In method com.sun.mail.auth.Ntlm.init0()<br/>At Ntlm.java:[line 103]<br/>Sink method javax/crypto/Cipher.getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;<br/>Sink parameter 0</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65669');">
<td>
<span class="priority-1">SECECB</span>
</td>
<td>The cipher uses ECB mode, which provides poor confidentiality for encrypted data</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65669" style="display: none;">
<a href="#ECB_MODE">Bug type ECB_MODE (click for details)</a>
<br/>In class com.sun.mail.auth.Ntlm<br/>In method com.sun.mail.auth.Ntlm.init0()<br/>At Ntlm.java:[line 103]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67882');">
<td>
<span class="priority-3">SECHRS</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67882" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.addHeader(String, String)<br/>At HttpServletResponseWrapper.java:[line 158]<br/>Sink method javax/servlet/http/HttpServletResponse.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67951');">
<td>
<span class="priority-3">SECHRS</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into HTTP headers</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67951" style="display: none;">
<a href="#HTTP_RESPONSE_SPLITTING">Bug type HTTP_RESPONSE_SPLITTING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.setHeader(String, String)<br/>At HttpServletResponseWrapper.java:[line 150]<br/>Sink method javax/servlet/http/HttpServletResponse.setHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65972');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65972" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class com.sun.mail.pop3.Protocol<br/>In method com.sun.mail.pop3.Protocol.getDigest(String)<br/>At Protocol.java:[line 272]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66104');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66104" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class com.sun.mail.smtp.DigestMD5<br/>In method com.sun.mail.smtp.DigestMD5.authClient(String, String, String, String, String)<br/>At DigestMD5.java:[line 83]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68492');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68492" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.getMd5Digest()<br/>At DigestUtils.java:[line 101]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68550');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68550" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.md5(InputStream)<br/>At DigestUtils.java:[line 179]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68608');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68608" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.md5(String)<br/>At DigestUtils.java:[line 190]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68666');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68666" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.md5(byte[])<br/>At DigestUtils.java:[line 165]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68724');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68724" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.md5Hex(InputStream)<br/>At DigestUtils.java:[line 215]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68782');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68782" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.md5Hex(String)<br/>At DigestUtils.java:[line 226]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68840');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>MD5 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68840" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.md5Hex(byte[])<br/>At DigestUtils.java:[line 201]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70058');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.apache.commons.lang.SerializationUtils.deserialize(InputStream)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70058" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.apache.commons.lang.SerializationUtils<br/>In method org.apache.commons.lang.SerializationUtils.deserialize(InputStream)<br/>At SerializationUtils.java:[line 162]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70400');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of java.util.Random is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70400" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.JVMRandom<br/>In method org.apache.commons.lang.math.JVMRandom.&lt;static initializer for JVMRandom&gt;()<br/>At JVMRandom.java:[line 49]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70458');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of java.util.Random is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70458" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.JVMRandom<br/>In method new org.apache.commons.lang.math.JVMRandom()<br/>At JVMRandom.java:[line 59]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70516');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.JVMRandom.nextLong() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70516" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.JVMRandom<br/>In method org.apache.commons.lang.math.JVMRandom.nextLong()<br/>At JVMRandom.java:[line 131]<br/>Value org.apache.commons.lang.math.JVMRandom.nextLong()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70574');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.JVMRandom is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70574" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.&lt;static initializer for RandomUtils&gt;()<br/>At RandomUtils.java:[line 37]<br/>Value org.apache.commons.lang.math.JVMRandom</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70632');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.RandomUtilsnextBoolean() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70632" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.nextBoolean()<br/>At RandomUtils.java:[line 119]<br/>Value org.apache.commons.lang.math.RandomUtilsnextBoolean()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70690');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.RandomUtilsnextDouble() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70690" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.nextDouble()<br/>At RandomUtils.java:[line 164]<br/>Value org.apache.commons.lang.math.RandomUtilsnextDouble()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70748');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.RandomUtilsnextFloat() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70748" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.nextFloat()<br/>At RandomUtils.java:[line 141]<br/>Value org.apache.commons.lang.math.RandomUtilsnextFloat()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70806');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.RandomUtilsnextInt() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70806" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.nextInt()<br/>At RandomUtils.java:[line 51]<br/>Value org.apache.commons.lang.math.RandomUtilsnextInt()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70864');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.RandomUtilsnextInt() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70864" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.nextInt(int)<br/>At RandomUtils.java:[line 74]<br/>Value org.apache.commons.lang.math.RandomUtilsnextInt()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N70922');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.math.RandomUtilsnextLong() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N70922" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.math.RandomUtils<br/>In method org.apache.commons.lang.math.RandomUtils.nextLong()<br/>At RandomUtils.java:[line 98]<br/>Value org.apache.commons.lang.math.RandomUtilsnextLong()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69304');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of java.util.Random is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69304" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.&lt;static initializer for RandomStringUtils&gt;()<br/>At RandomStringUtils.java:[line 45]<br/>Value java.util.Random</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69362');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69362" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int)<br/>At RandomStringUtils.java:[line 71]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69420');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69420" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, int, int, boolean, boolean)<br/>At RandomStringUtils.java:[line 165]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69478');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69478" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[])<br/>At RandomStringUtils.java:[line 189]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69536');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69536" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, String)<br/>At RandomStringUtils.java:[line 301]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69594');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69594" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, String)<br/>At RandomStringUtils.java:[line 303]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69652');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69652" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, boolean, boolean)<br/>At RandomStringUtils.java:[line 145]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69710');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69710" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, char[])<br/>At RandomStringUtils.java:[line 320]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69768');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69768" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.random(int, char[])<br/>At RandomStringUtils.java:[line 322]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69826');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69826" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.randomAlphabetic(int)<br/>At RandomStringUtils.java:[line 99]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69884');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69884" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(int)<br/>At RandomStringUtils.java:[line 113]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69942');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69942" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.randomAscii(int)<br/>At RandomStringUtils.java:[line 85]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N70000');">
<td>
<span class="priority-2">SECPR</span>
</td>
<td>The use of org.apache.commons.lang.RandomStringUtilsrandom() is predictable</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N70000" style="display: none;">
<a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
<br/>In class org.apache.commons.lang.RandomStringUtils<br/>In method org.apache.commons.lang.RandomStringUtils.randomNumeric(int)<br/>At RandomStringUtils.java:[line 127]<br/>Value org.apache.commons.lang.RandomStringUtilsrandom()</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65893');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>java/io/File.&lt;init&gt;(Ljava/lang/String;)V reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65893" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.sun.mail.pop3.POP3Store<br/>In method new com.sun.mail.pop3.POP3Store(Session, URLName, String, boolean)<br/>At POP3Store.java:[line 126]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/Session.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>At POP3Store.java:[line 122]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66030');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66030" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class com.sun.mail.pop3.TempFile<br/>In method new com.sun.mail.pop3.TempFile(File)<br/>At TempFile.java:[line 64]<br/>Sink method java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;<br/>Sink parameter 0<br/>At POP3Folder.java:[line 209]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66709');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>java/io/File.&lt;init&gt;(Ljava/lang/String;)V reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66709" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.internet.MimeBodyPart<br/>In method javax.mail.internet.MimeBodyPart.attachFile(String)<br/>At MimeBodyPart.java:[line 804]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66778');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>java/io/File.&lt;init&gt;(Ljava/lang/String;)V reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66778" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.internet.MimeBodyPart<br/>In method javax.mail.internet.MimeBodyPart.saveFile(String)<br/>At MimeBodyPart.java:[line 850]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66472');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66472" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.Session<br/>In method javax.mail.Session.loadFile(String, StreamLoader)<br/>At Session.java:[line 1069]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>At Session.java:[line 892]<br/>At Session.java:[line 895]<br/>At Session.java:[line 1028]<br/>At Session.java:[line 1031]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66993');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>java/io/RandomAccessFile.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66993" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class javax.mail.util.SharedFileInputStream$SharedFile<br/>In method new javax.mail.util.SharedFileInputStream$SharedFile(String)<br/>At SharedFileInputStream.java:[line 116]<br/>Sink method java/io/RandomAccessFile.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 1<br/>Method usage not detected<br/>At SharedFileInputStream.java:[line 179]<br/>At SharedFileInputStream.java:[line 209]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67082');">
<td>
<span class="priority-3">SECSCT</span>
</td>
<td>The HTTP header Content-Type can be controlled by the client</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67082" style="display: none;">
<a href="#SERVLET_CONTENT_TYPE">Bug type SERVLET_CONTENT_TYPE (click for details)</a>
<br/>In class javax.servlet.ServletRequestWrapper<br/>In method javax.servlet.ServletRequestWrapper.getContentType()<br/>At ServletRequestWrapper.java:[line 134]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67452');">
<td>
<span class="priority-3">SECSH</span>
</td>
<td>Request header can easily be altered by the client</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67452" style="display: none;">
<a href="#SERVLET_HEADER">Bug type SERVLET_HEADER (click for details)</a>
<br/>In class javax.servlet.http.HttpServlet<br/>In method javax.servlet.http.HttpServlet.doTrace(HttpServletRequest, HttpServletResponse)<br/>At HttpServlet.java:[line 565]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67723');">
<td>
<span class="priority-3">SECSH</span>
</td>
<td>Request header can easily be altered by the client</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67723" style="display: none;">
<a href="#SERVLET_HEADER">Bug type SERVLET_HEADER (click for details)</a>
<br/>In class javax.servlet.http.HttpServletRequestWrapper<br/>In method javax.servlet.http.HttpServletRequestWrapper.getHeader(String)<br/>At HttpServletRequestWrapper.java:[line 80]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68898');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68898" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.getShaDigest()<br/>At DigestUtils.java:[line 154]<br/>Value SHA</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68956');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA1 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68956" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.sha(InputStream)<br/>At DigestUtils.java:[line 251]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69014');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA1 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69014" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.sha(String)<br/>At DigestUtils.java:[line 262]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69072');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA1 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69072" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.sha(byte[])<br/>At DigestUtils.java:[line 237]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69130');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA1 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69130" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.shaHex(InputStream)<br/>At DigestUtils.java:[line 569]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N69188');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA1 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N69188" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.shaHex(String)<br/>At DigestUtils.java:[line 580]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N69246');">
<td>
<span class="priority-2">SECSHA1</span>
</td>
<td>SHA1 is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N69246" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_SHA1">Bug type WEAK_MESSAGE_DIGEST_SHA1 (click for details)</a>
<br/>In class org.apache.commons.codec.digest.DigestUtils<br/>In method org.apache.commons.codec.digest.DigestUtils.shaHex(byte[])<br/>At DigestUtils.java:[line 555]<br/>Value SHA1</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66847');">
<td>
<span class="priority-2">SECSMTP</span>
</td>
<td>Possible injection that can lead to Source spoofing, header override and email body injection.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66847" style="display: none;">
<a href="#SMTP_HEADER_INJECTION">Bug type SMTP_HEADER_INJECTION (click for details)</a>
<br/>In class javax.mail.internet.MimeMessage<br/>In method javax.mail.internet.MimeMessage.addRecipients(Message$RecipientType, String)<br/>At MimeMessage.java:[line 659]<br/>Sink method javax/mail/internet/MimeMessage.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66915');">
<td>
<span class="priority-2">SECSMTP</span>
</td>
<td>Possible injection that can lead to Source spoofing, header override and email body injection.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66915" style="display: none;">
<a href="#SMTP_HEADER_INJECTION">Bug type SMTP_HEADER_INJECTION (click for details)</a>
<br/>In class javax.mail.internet.MimeMessage<br/>In method javax.mail.internet.MimeMessage.addRecipients(Message$RecipientType, Address[])<br/>At MimeMessage.java:[line 635]<br/>Sink method javax/mail/internet/MimeMessage.addHeader(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/mail/internet/NewsAddress.toString([Ljavax/mail/Address;)Ljava/lang/String;<br/>At MimeMessage.java:[line 633]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67135');">
<td>
<span class="priority-3">SECSP</span>
</td>
<td>The method getParameter returns a String value that is controlled by the client</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67135" style="display: none;">
<a href="#SERVLET_PARAMETER">Bug type SERVLET_PARAMETER (click for details)</a>
<br/>In class javax.servlet.ServletRequestWrapper<br/>In method javax.servlet.ServletRequestWrapper.getParameter(String)<br/>At ServletRequestWrapper.java:[line 158]<br/>Value getParameter</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67192');">
<td>
<span class="priority-3">SECSP</span>
</td>
<td>The method getParameterMap returns a String value that is controlled by the client</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67192" style="display: none;">
<a href="#SERVLET_PARAMETER">Bug type SERVLET_PARAMETER (click for details)</a>
<br/>In class javax.servlet.ServletRequestWrapper<br/>In method javax.servlet.ServletRequestWrapper.getParameterMap()<br/>At ServletRequestWrapper.java:[line 166]<br/>Value getParameterMap</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67249');">
<td>
<span class="priority-3">SECSP</span>
</td>
<td>The method getParameterNames returns a String value that is controlled by the client</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67249" style="display: none;">
<a href="#SERVLET_PARAMETER">Bug type SERVLET_PARAMETER (click for details)</a>
<br/>In class javax.servlet.ServletRequestWrapper<br/>In method javax.servlet.ServletRequestWrapper.getParameterNames()<br/>At ServletRequestWrapper.java:[line 178]<br/>Value getParameterNames</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67306');">
<td>
<span class="priority-3">SECSP</span>
</td>
<td>The method getParameterValues returns a String value that is controlled by the client</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67306" style="display: none;">
<a href="#SERVLET_PARAMETER">Bug type SERVLET_PARAMETER (click for details)</a>
<br/>In class javax.servlet.ServletRequestWrapper<br/>In method javax.servlet.ServletRequestWrapper.getParameterValues(String)<br/>At ServletRequestWrapper.java:[line 189]<br/>Value getParameterValues</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67829');">
<td>
<span class="priority-3">SECSSID</span>
</td>
<td>Direct access to Session ID should be avoided</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67829" style="display: none;">
<a href="#SERVLET_SESSION_ID">Bug type SERVLET_SESSION_ID (click for details)</a>
<br/>In class javax.servlet.http.HttpServletRequestWrapper<br/>In method javax.servlet.http.HttpServletRequestWrapper.getRequestedSessionId()<br/>At HttpServletRequestWrapper.java:[line 183]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68439');">
<td>
<span class="priority-3">SECSSN</span>
</td>
<td>The hostname received can often be controlled by the client</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68439" style="display: none;">
<a href="#SERVLET_SERVER_NAME">Bug type SERVLET_SERVER_NAME (click for details)</a>
<br/>In class javax.servlet.http.HttpUtils<br/>In method javax.servlet.http.HttpUtils.getRequestURL(HttpServletRequest)<br/>At HttpUtils.java:[line 291]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67363');">
<td>
<span class="priority-3">SECSSN</span>
</td>
<td>The hostname received can often be controlled by the client</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67363" style="display: none;">
<a href="#SERVLET_SERVER_NAME">Bug type SERVLET_SERVER_NAME (click for details)</a>
<br/>In class javax.servlet.ServletRequestWrapper<br/>In method javax.servlet.ServletRequestWrapper.getServerName()<br/>At ServletRequestWrapper.java:[line 225]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67776');">
<td>
<span class="priority-3">SECSSQ</span>
</td>
<td>The query string can be any value</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67776" style="display: none;">
<a href="#SERVLET_QUERY_STRING">Bug type SERVLET_QUERY_STRING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletRequestWrapper<br/>In method javax.servlet.http.HttpServletRequestWrapper.getQueryString()<br/>At HttpServletRequestWrapper.java:[line 147]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66576');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66576" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class javax.mail.Session$7<br/>In method javax.mail.Session$7.run()<br/>At Session.java:[line 1277]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source javax/mail/Session$7.val$url<br/>At Session.java:[line 1277]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68020');">
<td>
<span class="priority-2">SECUR</span>
</td>
<td>The following redirection could be used by an attacker to redirect users to a phishing website.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68020" style="display: none;">
<a href="#UNVALIDATED_REDIRECT">Bug type UNVALIDATED_REDIRECT (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.sendRedirect(String)<br/>At HttpServletResponseWrapper.java:[line 126]<br/>Sink method javax/servlet/http/HttpServletResponse.sendRedirect(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68089');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68089" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.encodeRedirectURL(String)<br/>At HttpServletResponseWrapper.java:[line 84]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68142');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68142" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.encodeRedirectUrl(String)<br/>At HttpServletResponseWrapper.java:[line 100]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68195');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68195" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.encodeURL(String)<br/>At HttpServletResponseWrapper.java:[line 76]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68248');">
<td>
<span class="priority-1">SECURLR</span>
</td>
<td>Method rewriting session ID into the URL</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68248" style="display: none;">
<a href="#URL_REWRITING">Bug type URL_REWRITING (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.encodeUrl(String)<br/>At HttpServletResponseWrapper.java:[line 92]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66216');">
<td>
<span class="priority-2">SECUS</span>
</td>
<td>Unencrypted socket to com.sun.mail.util.SocketFetcher (instead of SSLSocket)</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66216" style="display: none;">
<a href="#UNENCRYPTED_SOCKET">Bug type UNENCRYPTED_SOCKET (click for details)</a>
<br/>In class com.sun.mail.util.SocketFetcher<br/>In method com.sun.mail.util.SocketFetcher.createSocket(InetAddress, int, String, int, int, Properties, String, SocketFactory, boolean, boolean)<br/>At SocketFetcher.java:[line 282]<br/>Value remote host</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N67505');">
<td>
<span class="priority-1">SECXSS2</span>
</td>
<td>This use of javax/servlet/ServletOutputStream.print(Ljava/lang/String;)V could be vulnerable to XSS</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N67505" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class javax.servlet.http.HttpServlet<br/>In method javax.servlet.http.HttpServlet.doTrace(HttpServletRequest, HttpServletResponse)<br/>At HttpServlet.java:[line 576]<br/>Sink method javax/servlet/ServletOutputStream.print(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/util/Enumeration.nextElement()Ljava/lang/Object;<br/>Unknown source javax/servlet/http/HttpServletRequest.getHeader(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source javax/servlet/http/HttpServletRequest.getRequestURI()Ljava/lang/String;<br/>Unknown source javax/servlet/http/HttpServletRequest.getHeaderNames()Ljava/util/Enumeration;<br/>Unknown source javax/servlet/http/HttpServletRequest.getProtocol()Ljava/lang/String;<br/>At HttpServlet.java:[line 558]<br/>At HttpServlet.java:[line 561]<br/>At HttpServlet.java:[line 564]<br/>At HttpServlet.java:[line 565]<br/>At HttpServlet.java:[line 569]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67644');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67644" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class javax.servlet.http.HttpServlet<br/>In method javax.servlet.http.HttpServlet.service(HttpServletRequest, HttpServletResponse)<br/>At HttpServlet.java:[line 662]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/text/MessageFormat.format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;<br/>At HttpServlet.java:[line 660]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N68301');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V could be vulnerable to XSS</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N68301" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.sendError(int, String)<br/>At HttpServletResponseWrapper.java:[line 108]<br/>Sink method javax/servlet/http/HttpServletResponse.sendError(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N68370');">
<td>
<span class="priority-2">SECXSS2</span>
</td>
<td>This use of javax/servlet/http/HttpServletResponse.setStatus(ILjava/lang/String;)V could be vulnerable to XSS</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N68370" style="display: none;">
<a href="#XSS_SERVLET">Bug type XSS_SERVLET (click for details)</a>
<br/>In class javax.servlet.http.HttpServletResponseWrapper<br/>In method javax.servlet.http.HttpServletResponseWrapper.setStatus(int, String)<br/>At HttpServletResponseWrapper.java:[line 192]<br/>Sink method javax/servlet/http/HttpServletResponse.setStatus(ILjava/lang/String;)V<br/>Sink parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65723');">
<td>
<span class="priority-2">SECXXETFDTD</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XML External Entity attacks</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65723" style="display: none;">
<a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
<br/>In class com.sun.mail.handlers.text_xml<br/>In method com.sun.mail.handlers.text_xml.writeTo(Object, String, OutputStream)<br/>At text_xml.java:[line 128]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65781');">
<td>
<span class="priority-2">SECXXETFXSLT</span>
</td>
<td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65781" style="display: none;">
<a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
<br/>In class com.sun.mail.handlers.text_xml<br/>In method com.sun.mail.handlers.text_xml.writeTo(Object, String, OutputStream)<br/>At text_xml.java:[line 128]<br/>Value TransformerFactory.newInstance(...)</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CIPHER_INTEGRITY">CIPHER_INTEGRITY: Cipher with no integrity</a>
</h2>
            
<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the 
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error <sup><a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>

        
<h2>
<a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
</h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>

<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a>
</p>
            
        
<h2>
<a name="DESERIALIZATION_GADGET">DESERIALIZATION_GADGET: This class could be used as deserialization gadget</a>
</h2>
            
<p>
Deserialization gadget are class that could be used by an attacker to take advantage of a remote API using Native Serialization.
This class is either adding custom behavior to deserialization with the <code>readObject</code> method (Serializable) or can be called
 from a serialized object (InvocationHandler).
</p>
<p>
This detector is intended to be used mostly by researcher. The real issue is using deserialization for remote operation.
Removing gadget is a hardening practice to reduce the risk of being exploited.
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="DES_USAGE">DES_USAGE: DES is insecure</a>
</h2>
            
<p>
DES is considered strong ciphers for modern applications. Currently, NIST recommends the
usage of AES block ciphers instead of DES.
</p>
<p>
    <b>Example weak code:</b>
<pre>Cipher c = Cipher.getInstance("DES/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Example solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://www.nist.gov/itl/fips/060205_des.cfm">NIST Withdraws Outdated Data Encryption Standard</a><br/>
<a href="http://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a>
</p>

        
<h2>
<a name="ECB_MODE">ECB_MODE: ECB mode is insecure</a>
</h2>
            
<p>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Code Book (ECB) mode,
which does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So, 
for example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept 
and replay the data.</p>
<p>
To fix this, something like Galois/Counter Mode (GCM) should be used instead.
</p>
<p>
<b>Code at risk:</b>
    <pre>Cipher c = Cipher.getInstance("AES/ECB/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
<a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01">NIST: Authenticated Encryption Modes</a><br/>
<a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29">Wikipedia: Block cipher modes of operation</a><br/>
<a href="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf">NIST: Recommendation for Block Cipher Modes of Operation</a>
</p>

        
<h2>
<a name="HTTP_RESPONSE_SPLITTING">HTTP_RESPONSE_SPLITTING: Potential HTTP Response Splitting</a>
</h2>
            
<p>
    When an HTTP request contains unexpected <code>CR</code> and <code>LF</code> characters, the server may respond with an output stream
    that is interpreted as two different HTTP responses (instead of one).
    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.
    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.
    If you are concerned about this risk, you should test on the platform of concern to see
    if the underlying platform allows for <code>CR</code> or <code>LF</code> characters to be injected into headers.
    This weakness is reported with low priority because it requires the web container to be vulnerable.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String author = request.getParameter(AUTHOR_PARAMETER);
// ...
Cookie cookie = new Cookie("author", author);
response.addCookie(cookie);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.owasp.org/index.php/HTTP_Response_Splitting">OWASP: HTTP Response Splitting</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/113.html">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>
    <a href="http://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
</p>


        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="http://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="http://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
</h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="http://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter. 
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="http://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="http://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="SERVLET_CONTENT_TYPE">SERVLET_CONTENT_TYPE: Untrusted Content-Type header</a>
</h2>
            
<p>
The HTTP header Content-Type can be controlled by the client. As such, its value should not be used in any security critical decisions.
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>

        
<h2>
<a name="SERVLET_HEADER">SERVLET_HEADER: HTTP headers untrusted</a>
</h2>
            
<p>Request headers can easily be altered by the requesting user. In general, no assumption should be made that 
the request came from a regular browser without modification by an attacker. As such, it is recommended that you 
not trust this value in any security decisions you make with respect to a request.</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>

        
<h2>
<a name="WEAK_MESSAGE_DIGEST_SHA1">WEAK_MESSAGE_DIGEST_SHA1: SHA-1 is a weak hash function</a>
</h2>
            
<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other
uses. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "<b>SHA-1 for digital signature generation:</b><br/>
    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.
    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>
    <b>SHA-1 for digital signature verification:</b><br/>
    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>
    [...]<br/>
    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>

</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>
<a href="https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>
<a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="SMTP_HEADER_INJECTION">SMTP_HEADER_INJECTION: SMTP Header Injection</a>
</h2>
            
<p>
Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for email delivery.
Like with HTTP, headers are separate by new line separator.
If user input is place in a header line, the application should remove
or replace new line characters (<code>CR</code> / <code>LF</code>).
You should use a safe wrapper such as <a href="https://commons.apache.org/proper/commons-email/userguide.html">Apache Common Email</a>
and <a href="http://www.simplejavamail.org">Simple Java Mail</a> which filter special characters that can lead to header injection.

</p>
    <b>Vulnerable Code:</b><br/>
<p>
<pre>
Message message = new MimeMessage(session);
message.setFrom(new InternetAddress("noreply@your-organisation.com"));
message.setRecipients(Message.RecipientType.TO, new InternetAddress[] {new InternetAddress("target@gmail.com")});
message.setSubject(usernameDisplay + " has sent you notification"); //Injectable API
message.setText("Visit your ACME Corp profile for more info.");
Transport.send(message);
</pre>
</p>
    <b>Solution</b><br/>
<p>Use <a href="https://commons.apache.org/proper/commons-email/userguide.html">Apache Common Email</a> or <a href="http://www.simplejavamail.org">Simple Java Mail</a>.</p>

<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OTG-INPVAL-011)">OWASP SMTP Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
<a href="https://commons.apache.org/proper/commons-email/userguide.html">Commons Email: User Guide</a><br/>
<a href="http://www.simplejavamail.org">Simple Java Mail Website</a><br/>
<a href="https://security.stackexchange.com/a/54100/24973">StackExchange InfoSec: What threats come from CRLF in email generation?</a><br/>
</p>
            
        
<h2>
<a name="SERVLET_PARAMETER">SERVLET_PARAMETER: Untrusted servlet parameter</a>
</h2>
            
<p>The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.
You may need to validate or sanitize those values before passing them to sensitive APIs such as:</p>
<ul>
<li>SQL query (May leads to SQL injection)</li>
<li>File opening (May leads to path traversal)</li>
<li>Command execution (Potential Command injection)</li>
<li>HTML construction (Potential XSS)</li>
<li>etc...</li>
</ul>

<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>

        
<h2>
<a name="SERVLET_SESSION_ID">SERVLET_SESSION_ID: Untrusted session cookie value</a>
</h2>
            
<p>
The method <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId()"><code>HttpServletRequest.getRequestedSessionId()</code></a>
typically returns the value of the cookie <code>JSESSIONID</code>. This value is normally only accessed by the session management logic and not normal developer code.
</p>
<p>
The value passed to the client is generally an alphanumeric value (e.g., <code>JSESSIONID=jp6q31lq2myn</code>). However, the value can be altered by the client. 
The following HTTP request illustrates the potential modification.
<pre>
GET /somePage HTTP/1.1
Host: yourwebsite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Any value of the user&#39;s choice!!??'''&quot;&gt;
</pre>
</p>
<p>As such, the JSESSIONID should only be used to see if its value matches an existing session ID. If it does not, the user should be 
considered an unauthenticated user. In addition, the session ID value should never be logged. If it is, then the log file could contain 
valid active session IDs, allowing an insider to hijack any sessions whose IDs have been logged and are still active.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet">OWASP: Session Management Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>

</p>

        
<h2>
<a name="SERVLET_SERVER_NAME">SERVLET_SERVER_NAME: Untrusted Hostname header</a>
</h2>
            
<p>The hostname header can be controlled by the client. As such, its value should not be used in any security critical decisions. 
Both <code>ServletRequest.getServerName()</code> and <code>HttpServletRequest.getHeader("Host")</code> have the same 
behavior which is to extract the <code>Host</code> header.</p>
<pre>
GET /testpage HTTP/1.1
Host: www.example.com
[...]</pre>
<p>
The web container serving your application may redirect requests to your application by default. This would allow
a malicious user to place any value in the Host header. It is recommended that you do not trust this value in any security
decisions you make with respect to a request.
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>

        
<h2>
<a name="SERVLET_QUERY_STRING">SERVLET_QUERY_STRING: Untrusted query string</a>
</h2>
            
<p>The query string is the concatenation of the GET parameter names and values. Parameters other than those intended can
be passed in.</p>
<p>For the URL request <code>/app/servlet.htm?a=1&b=2</code>, the query string extract will be <code>a=1&b=2</code></p>
<p>Just as is true for individual parameter values retrieved via methods like <code>HttpServletRequest.getParameter()</code>, 
the value obtained from <code>HttpServletRequest.getQueryString()</code> should be considered unsafe.
You may need to validate or sanitize anything pulled from the query string before passing it to sensitive APIs. 
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
new URL(String url).openStream()
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            
<h2>
<a name="UNVALIDATED_REDIRECT">UNVALIDATED_REDIRECT: Unvalidated Redirect</a>
</h2>
            
<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>
            
        
<h2>
<a name="URL_REWRITING">URL_REWRITING: URL rewriting method</a>
</h2>
            
<p>
The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>
URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>
<ul>
    <li>Log files,</li>
    <li>The browser history,</li>
    <li>By copy-and-pasting it into an e-mail or posting,</li>
    <li>The HTTP Referrer.</li>
</ul>
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>out.println("Click &lt;a href=" + 
                res.encodeURL(HttpUtils.getRequestURL(req).toString()) + 
                "&gt;here&lt;/a&gt;");</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>
</p>
            
        
<h2>
<a name="UNENCRYPTED_SOCKET">UNENCRYPTED_SOCKET: Unencrypted Socket</a>
</h2>
            
<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>

        
<h2>
<a name="XSS_SERVLET">XSS_SERVLET: Potential XSS in Servlet</a>
</h2>
            
<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider: 
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>
            
        
<h2>
<a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="http://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        
<h2>
<a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
</h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "all");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "all");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="http://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        </body>
</html>
