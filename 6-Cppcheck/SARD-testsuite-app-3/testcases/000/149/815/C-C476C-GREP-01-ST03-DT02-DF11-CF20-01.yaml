code_complexity_features:
  - file_name: /tmp/tmp8XEqCP_ss_testcase/src-rose/src/dfa.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: source_taint
    feature: SOCKET
  - file_name: /tmp/tmp8XEqCP_ss_testcase/src-rose/src/dfa.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmp8XEqCP_ss_testcase/src-rose/src/dfa.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmp8XEqCP_ss_testcase/src-rose/src/dfa.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: sequence
description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"
io_pair:
  benigns:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          source_enum: 5
          source: socket_input
          stage: co_process
          stage_enum: 1
          ordinal: 1
          value_type_enum: 0
          id: source
          address: ss-localhost
          value: 1 foo
          value_encoding: none
          port: 8887
    - inputs:
        - address: ss-localhost
          ordinal: 1
          port: 8887
          source_enum: 5
          source: socket_input
          value_encoding: none
          stage: co_process
          stage_enum: 1
          id: source
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value: 2 a b
    - inputs:
        - value: 3 alpha bravo charlie
          ordinal: 1
          address: ss-localhost
          value_encoding: none
          source_enum: 5
          source: socket_input
          stage_enum: 1
          stage: co_process
          port: 8887
          id: source
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
  base_inputs:
    - source: socket_input
      source_enum: 5
      stage: co_process
      stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
  description: "Read a space-delimited string from the input.  The first element in the string is the number of elements following it.  Then read in the following elements, and output them to stderr.  If there are fewer elements than expected, a seg fault occurs.\n\n"
  exploits:
    - inputs:
        - ordinal: 1
          port: 8887
          address: ss-localhost
          stage: co_process
          value: 2 a
          stage_enum: 1
          id: source
          source_enum: 5
          source: socket_input
          value_type_enum: 0
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
    - inputs:
        - source_enum: 5
          port: 8887
          address: ss-localhost
          value_type_enum: 0
          ordinal: 1
          id: source
          stage: co_process
          stage_enum: 1
          value_encoding: none
          value: 10 a b c
          value_type: USE_TEXT_DIRECTLY
          source: socket_input