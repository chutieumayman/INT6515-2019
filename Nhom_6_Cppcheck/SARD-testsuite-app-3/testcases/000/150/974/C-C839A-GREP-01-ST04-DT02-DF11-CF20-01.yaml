io_pair:
  exploits:
    - inputs:
        - value_type_enum: 0
          value: -8000000
          value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          flags: 950
          source: shared_memory_input
          stage_enum: 0
          stage: pre_process
          ordinal: 1
          id: source
          size: 10
          key: 8353
          value_encoding: none
    - inputs:
        - value_encoding: none
          source: shared_memory_input
          id: source
          source_enum: 6
          stage: pre_process
          value: -16777215
          size: 10
          value_type_enum: 0
          key: 8353
          value_type: USE_TEXT_DIRECTLY
          flags: 950
          stage_enum: 0
          ordinal: 1
  base_inputs:
    - source: shared_memory_input
      source_enum: 6
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      key: 8353
      size: 10
      flags: 950
  description: "Read an integer from the input.  If integer >= 4096, do nothing.Else malloc a buffer of 4096 bytes.  Memset the buffer to 'a'. Memset bytes of buffer from input_integer to 4095 to 'b'. Print the buffer.  This all works correctly if the input_integer is 0 or greater.  If input_integer is negative, we will try to memset a random place in memory.  If the input_integer is sufficiently large, this is unaddressable, and we get a segfault.\n\n"
  benigns:
    - inputs:
        - flags: 950
          ordinal: 1
          key: 8353
          source: shared_memory_input
          stage: pre_process
          stage_enum: 0
          id: source
          size: 10
          value_type: USE_TEXT_DIRECTLY
          value: 10
          value_encoding: none
          value_type_enum: 0
          source_enum: 6
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          id: source
          source: shared_memory_input
          stage_enum: 0
          key: 8353
          source_enum: 6
          ordinal: 1
          flags: 950
          value_encoding: none
          value: 1000
          size: 10
          value_type_enum: 0
    - inputs:
        - source_enum: 6
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          ordinal: 1
          stage_enum: 0
          stage: pre_process
          id: source
          size: 10
          value: 20
          key: 8353
          value_encoding: none
          flags: 950
          value_type_enum: 0
code_complexity_features:
  - file_name: /tmp/tmpytBDfG_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: source_taint
    feature: SHARED_MEMORY
  - file_name: /tmp/tmpytBDfG_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmpytBDfG_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmpytBDfG_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: control_flow
    feature: sequence
description: "Creating test case using base program.\nAdded an environment variable read to get a key in order to read in data from shared memory.\nCompleted injection.\n"