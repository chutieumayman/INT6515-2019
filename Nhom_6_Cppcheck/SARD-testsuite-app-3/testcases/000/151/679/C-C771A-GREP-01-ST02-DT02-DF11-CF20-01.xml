<?xml version="1.0" encoding="utf-8"?>
<project base_program="C-GREP" language="C" name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01" targeted_architecture="ANY" targeted_os="LINUX" test_case_type="ALL" xmlns="urn:stonesoup:project">
    <description>Creating test case using base program.
Added an environment variable read to get a filename to read in the file contents using an fread operation within the function
Completed injection.
</description>
    <additional_information>
        <keyvalue key="algorithmic_variant_name">UNSPECIFIED</keyvalue>
        <keyvalue key="root_cause">UNSPECIFIED</keyvalue>
    </additional_information>
    <structure install="install" iodata="testData" scoredata="testOutput" scripts="scripts" source="src"/>
    <resource_limits>
        <limit type="RLIMIT_AS">3221225472</limit>
    </resource_limits>
    <run_command>$SS_TC_ROOT/$SS_TC_INSTALL/bin/grep</run_command>
    <weakness generation_method="FAULT_INJECTED">
        <variant cwe="CWE-771" name="CWE-771-A"/>
        <features>
            <taint_source file_name="/src/dfa.c" line_number="0" type="FILE_CONTENTS">
                <method name="dfamust"/>
            </taint_source>
            <data_type file_name="/src/dfa.c" line_number="0" type="SIMPLE">
                <method name="dfamust"/>
            </data_type>
            <data_flow file_name="/src/dfa.c" line_number="0" type="BASIC">
                <method name="dfamust"/>
            </data_flow>
            <control_flow file_name="/src/dfa.c" line_number="0" type="SEQUENCE">
                <method name="dfamust"/>
            </control_flow>
        </features>
    </weakness>
    <build_commands cppflags="-DSTONESOUP_TRACE=1" libs="-ldl">
        <command>./configure --prefix=&quot;$SS_TC_ROOT/$SS_TC_INSTALL&quot; --exec-prefix=&quot;$SS_TC_ROOT/$SS_TC_INSTALL&quot; --with-included-regex</command>
        <command>make V=1 CC=&quot;$SS_CC&quot; CCLD=&quot;$SS_LNK&quot;</command>
        <command>make V=1 install CC=&quot;$SS_CC&quot; CCLD=&quot;$SS_LNK&quot;</command>
    </build_commands>
    <iopairs>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-01" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>all words beginning with e or x, case sensitive
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_1.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_1.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_1_1 /opt/stonesoup/workspace/testData/benign_data_1_2 /opt/stonesoup/workspace/testData/benign_data_1_3 /opt/stonesoup/workspace/testData/benign_data_1_4 /opt/stonesoup/workspace/testData/benign_data_1_5 /opt/stonesoup/workspace/testData/benign_data_1_6 /opt/stonesoup/workspace/testData/benign_data_1_7 /opt/stonesoup/workspace/testData/benign_data_1_8 /opt/stonesoup/workspace/testData/benign_data_1_9 /opt/stonesoup/workspace/testData/benign_data_1_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">^[ex] input/dict.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_McmjyIaBna" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-01-Default">
                <formula name="GOOD-01-Default">STDOUT-01 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-01">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-01/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-02" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>find BIRMINGHAM, ignore case, recursive
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_2.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_2.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_2_1 /opt/stonesoup/workspace/testData/benign_data_2_2 /opt/stonesoup/workspace/testData/benign_data_2_3 /opt/stonesoup/workspace/testData/benign_data_2_4 /opt/stonesoup/workspace/testData/benign_data_2_5 /opt/stonesoup/workspace/testData/benign_data_2_6 /opt/stonesoup/workspace/testData/benign_data_2_7 /opt/stonesoup/workspace/testData/benign_data_2_8 /opt/stonesoup/workspace/testData/benign_data_2_9 /opt/stonesoup/workspace/testData/benign_data_2_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=512 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_2_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_2_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-r -i BIRMINGHAM input/zip/</run_command>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">sort $SS_LOG_EXECUTE_STDOUT -o $SS_LOG_EXECUTE_STDOUT_tmp &amp;&amp; mv $SS_LOG_EXECUTE_STDOUT_tmp $SS_LOG_EXECUTE_STDOUT</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_2_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_aKVcbZQP05" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-02-Default">
                <formula name="GOOD-02-Default">STDOUT-02 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-02">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-02/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-03" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>read extented regular expressions from file
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_3.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_3.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_3_1 /opt/stonesoup/workspace/testData/benign_data_3_2 /opt/stonesoup/workspace/testData/benign_data_3_3 /opt/stonesoup/workspace/testData/benign_data_3_4 /opt/stonesoup/workspace/testData/benign_data_3_5 /opt/stonesoup/workspace/testData/benign_data_3_6 /opt/stonesoup/workspace/testData/benign_data_3_7 /opt/stonesoup/workspace/testData/benign_data_3_8 /opt/stonesoup/workspace/testData/benign_data_3_9 /opt/stonesoup/workspace/testData/benign_data_3_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-E -f input/grep-good-03-expr.txt input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_6IEgPXrUAR" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-03-Default">
                <formula name="GOOD-03-Default">STDOUT-03 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-03">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-03/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-04" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>search for entire words matching a specific pattern
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_1.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_1.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_1_1 /opt/stonesoup/workspace/testData/benign_data_1_2 /opt/stonesoup/workspace/testData/benign_data_1_3 /opt/stonesoup/workspace/testData/benign_data_1_4 /opt/stonesoup/workspace/testData/benign_data_1_5 /opt/stonesoup/workspace/testData/benign_data_1_6 /opt/stonesoup/workspace/testData/benign_data_1_7 /opt/stonesoup/workspace/testData/benign_data_1_8 /opt/stonesoup/workspace/testData/benign_data_1_9 /opt/stonesoup/workspace/testData/benign_data_1_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-w -f input/grep-good-04-expr.txt input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_rqo8L9Tc8i" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-04-Default">
                <formula name="GOOD-04-Default">STDOUT-04 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-04">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-04/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-05" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>use mmap(), find NASDAQ in file
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_2.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_2.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_2_1 /opt/stonesoup/workspace/testData/benign_data_2_2 /opt/stonesoup/workspace/testData/benign_data_2_3 /opt/stonesoup/workspace/testData/benign_data_2_4 /opt/stonesoup/workspace/testData/benign_data_2_5 /opt/stonesoup/workspace/testData/benign_data_2_6 /opt/stonesoup/workspace/testData/benign_data_2_7 /opt/stonesoup/workspace/testData/benign_data_2_8 /opt/stonesoup/workspace/testData/benign_data_2_9 /opt/stonesoup/workspace/testData/benign_data_2_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=512 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_2_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_2_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--mmap NASDAQ input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_2_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_BKMKuto8QV" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-05-Default">
                <formula name="GOOD-05-Default">STDOUT-05 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-05">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-05/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-06" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>match lines not containing NASDAQ, ignore case, count
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_3.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_3.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_3_1 /opt/stonesoup/workspace/testData/benign_data_3_2 /opt/stonesoup/workspace/testData/benign_data_3_3 /opt/stonesoup/workspace/testData/benign_data_3_4 /opt/stonesoup/workspace/testData/benign_data_3_5 /opt/stonesoup/workspace/testData/benign_data_3_6 /opt/stonesoup/workspace/testData/benign_data_3_7 /opt/stonesoup/workspace/testData/benign_data_3_8 /opt/stonesoup/workspace/testData/benign_data_3_9 /opt/stonesoup/workspace/testData/benign_data_3_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-v -i -c NASDAQ input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_EMGXCQbECN" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-06-Default">
                <formula name="GOOD-06-Default">STDOUT-06 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-06">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-06/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-07" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>grep stdin (a device), match words beginning w/ D, P, or Z, redirect file into stdin
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_1.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_1.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_1_1 /opt/stonesoup/workspace/testData/benign_data_1_2 /opt/stonesoup/workspace/testData/benign_data_1_3 /opt/stonesoup/workspace/testData/benign_data_1_4 /opt/stonesoup/workspace/testData/benign_data_1_5 /opt/stonesoup/workspace/testData/benign_data_1_6 /opt/stonesoup/workspace/testData/benign_data_1_7 /opt/stonesoup/workspace/testData/benign_data_1_8 /opt/stonesoup/workspace/testData/benign_data_1_9 /opt/stonesoup/workspace/testData/benign_data_1_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-D read -e ^[DPZ] /dev/stdin &lt; input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_kNxc4B4Qt9" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-07-Default">
                <formula name="GOOD-07-Default">STDOUT-07 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-07">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-07/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-08" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>extended grep, print number of lines of context
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_2.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_2.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_2_1 /opt/stonesoup/workspace/testData/benign_data_2_2 /opt/stonesoup/workspace/testData/benign_data_2_3 /opt/stonesoup/workspace/testData/benign_data_2_4 /opt/stonesoup/workspace/testData/benign_data_2_5 /opt/stonesoup/workspace/testData/benign_data_2_6 /opt/stonesoup/workspace/testData/benign_data_2_7 /opt/stonesoup/workspace/testData/benign_data_2_8 /opt/stonesoup/workspace/testData/benign_data_2_9 /opt/stonesoup/workspace/testData/benign_data_2_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=512 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_2_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_2_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-E -C 15 ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_2_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_wn4zAG1qC9" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-08-Default">
                <formula name="GOOD-08-Default">STDOUT-08 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-08">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-08/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-09" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>lines not beginning w/ B, R or T
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_3.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_3.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_3_1 /opt/stonesoup/workspace/testData/benign_data_3_2 /opt/stonesoup/workspace/testData/benign_data_3_3 /opt/stonesoup/workspace/testData/benign_data_3_4 /opt/stonesoup/workspace/testData/benign_data_3_5 /opt/stonesoup/workspace/testData/benign_data_3_6 /opt/stonesoup/workspace/testData/benign_data_3_7 /opt/stonesoup/workspace/testData/benign_data_3_8 /opt/stonesoup/workspace/testData/benign_data_3_9 /opt/stonesoup/workspace/testData/benign_data_3_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=70 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_3_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_3_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-v ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_3_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_MPynvwkHPZ" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-09-Default">
                <formula name="GOOD-09-Default">STDOUT-09 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-09">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-09/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-GOOD-10" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>count lines not beginning w/ B, R or T
Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/good_1.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/good_1.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/benign_data_1_1 /opt/stonesoup/workspace/testData/benign_data_1_2 /opt/stonesoup/workspace/testData/benign_data_1_3 /opt/stonesoup/workspace/testData/benign_data_1_4 /opt/stonesoup/workspace/testData/benign_data_1_5 /opt/stonesoup/workspace/testData/benign_data_1_6 /opt/stonesoup/workspace/testData/benign_data_1_7 /opt/stonesoup/workspace/testData/benign_data_1_8 /opt/stonesoup/workspace/testData/benign_data_1_9 /opt/stonesoup/workspace/testData/benign_data_1_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=1024 count=60 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/benign_data_1_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/benign_data_1_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-c -v ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/benign_data_1_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_tWKitnf52Z" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-10-Default">
                <formula name="GOOD-10-Default">STDOUT-10 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-10">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-10/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-BAD-01" reset_scheme="NONE" timeout="300" type="BAD">
            <description>Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>DOS_RESOURCE_CONSUMPTION</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_8 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_8 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_8 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/bad_1.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/bad_1.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/exploit_data_1_1 /opt/stonesoup/workspace/testData/exploit_data_1_2 /opt/stonesoup/workspace/testData/exploit_data_1_3 /opt/stonesoup/workspace/testData/exploit_data_1_4 /opt/stonesoup/workspace/testData/exploit_data_1_5 /opt/stonesoup/workspace/testData/exploit_data_1_6 /opt/stonesoup/workspace/testData/exploit_data_1_7 /opt/stonesoup/workspace/testData/exploit_data_1_8 /opt/stonesoup/workspace/testData/exploit_data_1_9 /opt/stonesoup/workspace/testData/exploit_data_1_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_1 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_1 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_2 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_2 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_3 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_3 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_4 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_4 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_5 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_5 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_6 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_6 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$((1024 * 1024)) count=200 | xxd -p | tr -dc 'a-zA-Z0-9' &gt; /opt/stonesoup/workspace/testData/exploit_data_1_7 &amp;&amp; printf @ &gt;&gt; /opt/stonesoup/workspace/testData/exploit_data_1_7 &amp;&amp;printf '/opt/stonesoup/workspace/testData/exploit_data_1_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-r -i BIRMINGHAM input/zip/</run_command>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">sort $SS_LOG_EXECUTE_STDOUT -o $SS_LOG_EXECUTE_STDOUT_tmp &amp;&amp; mv $SS_LOG_EXECUTE_STDOUT_tmp $SS_LOG_EXECUTE_STDOUT</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_1_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_eYP2GgxY09wNOAoP0j9g" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="ulimit_reached_formula_qsmOXqzxKW">
                <formula name="ulimit_reached_formula_qsmOXqzxKW">weakness_started_5cki6P7mbJxLL2KgrGB9 AND ((NOT PERFORMER AND (ulimit_reached_K6T9pc54es) AND NOT timeout_YdyPKIymC0) or (PERFORMER AND NOT ((ulimit_reached_K6T9pc54es) OR timeout_YdyPKIymC0)))</formula>
                <formula name="no_weakness_started_formula_9D7CQKxQq5">(NOT PERFORMER AND (ulimit_reached_K6T9pc54es) AND NOT timeout_YdyPKIymC0) or (PERFORMER AND NOT ((ulimit_reached_K6T9pc54es) OR timeout_YdyPKIymC0))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_YdyPKIymC0" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_lfYzL53eyb" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_0i9P6xNpK5" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <compare_check check_type="CONTAINS" name="ulimit_reached_K6T9pc54es">
                    <actual encoding="STRING" output_type="FILE_CONTENTS">logfile.txt</actual>
                    <expected encoding="STRING" type="USE_TEXT">Malloc error due to ulimit</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="weakness_started_5cki6P7mbJxLL2KgrGB9">
                    <actual encoding="STRING" input_id_ref="lttng_output_eYP2GgxY09wNOAoP0j9g" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
        <iopair name="C-C771A-GREP-01-ST02-DT02-DF11-CF20-01-BAD-02" reset_scheme="NONE" timeout="300" type="BAD">
            <description>Read in a file containing a list of 10 other files. Open these files and read their contents. If these contents are purly alphanumeric, the memory gets properly free()'d, otherwise a missing reference is created.

</description>
            <technical_impact>DOS_RESOURCE_CONSUMPTION</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env BATEMENT_CHANGEABOUT;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="BATEMENT_CHANGEABOUT" type="USE_TEXT">/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_8 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_8 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_9 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_9 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_10 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_10 generated\n'</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/fasto_howel/retropack_angelina.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/bad_2.txt</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/bad_2.txt" type="USE_TEXT">/opt/stonesoup/workspace/testData/exploit_data_2_1 /opt/stonesoup/workspace/testData/exploit_data_2_2 /opt/stonesoup/workspace/testData/exploit_data_2_3 /opt/stonesoup/workspace/testData/exploit_data_2_4 /opt/stonesoup/workspace/testData/exploit_data_2_5 /opt/stonesoup/workspace/testData/exploit_data_2_6 /opt/stonesoup/workspace/testData/exploit_data_2_7 /opt/stonesoup/workspace/testData/exploit_data_2_8 /opt/stonesoup/workspace/testData/exploit_data_2_9 /opt/stonesoup/workspace/testData/exploit_data_2_10 </file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_1 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_1 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_2 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_2 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_3 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_3 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_4 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_4 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_5 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_5 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_6 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_6 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">dd if=/dev/urandom bs=$(( 1024 * 1024 )) count=310 of=/opt/stonesoup/workspace/testData/exploit_data_2_7 &amp;&amp; printf '/opt/stonesoup/workspace/testData/exploit_data_2_7 generated\n'</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-w -f input/grep-good-04-expr.txt input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_1</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_10</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_2</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_3</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_4</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_5</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_6</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_7</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_8</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf /opt/stonesoup/workspace/testData/exploit_data_2_9</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_xeiMqujL8hgB8Ir3YVwK" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="ulimit_reached_formula_DbzhlRnvhE">
                <formula name="ulimit_reached_formula_DbzhlRnvhE">weakness_started_KmCEhgkNpkvQrQ7zRoKN AND ((NOT PERFORMER AND (ulimit_reached_FugbSOwoo3) AND NOT timeout_TSk5Kdm7Ea) or (PERFORMER AND NOT ((ulimit_reached_FugbSOwoo3) OR timeout_TSk5Kdm7Ea)))</formula>
                <formula name="no_weakness_started_formula_jdD9A4T4zC">(NOT PERFORMER AND (ulimit_reached_FugbSOwoo3) AND NOT timeout_TSk5Kdm7Ea) or (PERFORMER AND NOT ((ulimit_reached_FugbSOwoo3) OR timeout_TSk5Kdm7Ea))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_TSk5Kdm7Ea" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_9DEw0oQzs2" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_4BdXzq2Frn" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <compare_check check_type="CONTAINS" name="ulimit_reached_FugbSOwoo3">
                    <actual encoding="STRING" output_type="FILE_CONTENTS">logfile.txt</actual>
                    <expected encoding="STRING" type="USE_TEXT">Malloc error due to ulimit</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="weakness_started_KmCEhgkNpkvQrQ7zRoKN">
                    <actual encoding="STRING" input_id_ref="lttng_output_xeiMqujL8hgB8Ir3YVwK" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
    </iopairs>
</project>
